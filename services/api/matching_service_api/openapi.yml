openapi: 3.1.0
info:
  title: Matching Service API
  description: API for user, topic, subscription, publisher, metric management, message queues, and matching.
  version: "1.0.0"

servers:
  - url: /api

tags:
  - name: Auth
    description: User authentication and token management
  - name: Users
    description: User management
  - name: Topics
    description: Topic management
  - name: Subscriptions
    description: Subscriptions management
  - name: Publishers
    description: Publisher management
  - name: Metrics
    description: Metrics ingestion and statistics
  - name: Match
    description: Topic matching and subscription queries
  - name: Queues
    description: RabbitMQ publishing and polling
  - name: Admin
    description: Admin-only endpoints

paths:

  # -------------------
  # AUTH
  # -------------------
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: Username already exists
        "422":
          description: Validation error

  /auth/login:
    post:
      tags: [Auth]
      summary: Login and obtain access/refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: Tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "401":
          description: Invalid credentials
        "400":
          description: Missing username or password

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token using a refresh token
      security:
        - bearerAuth: []
      responses:
        "200":
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        "401":
          description: Invalid or expired refresh token

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current logged-in user info
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User not found

  # -------------------
  # USERS
  # -------------------
  /users:
    get:
      tags: [Users]
      summary: List all users (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        "403":
          description: Admin privilege required

    post:
      tags: [Users]
      summary: Create a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "403":
          description: Admin privilege required
        "409":
          description: Username already exists
        "422":
          description: Validation error

  /users/{user_id}:
    get:
      tags: [Users]
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "403":
          description: Access denied
        "404":
          description: User not found

    put:
      tags: [Users]
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "403":
          description: Access denied
        "404":
          description: User not found
        "422":
          description: Validation error

    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted
        "403":
          description: Access denied
        "404":
          description: User not found

# -------------------
# TOPICS
# -------------------
  /topics:
    get:
      tags: [Topics]
      summary: List all topics
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicResponse'

    post:
      tags: [Topics]
      summary: Create a new topic
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicModel'
      responses:
        "201":
          description: Topic created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "422":
          description: Validation error

  /topics/{topic_id}:
    get:
      tags: [Topics]
      summary: Get a topic by ID
      security:
        - bearerAuth: []
      parameters:
        - name: topic_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Topic data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'
        "404":
          description: Topic not found

    put:
      tags: [Topics]
      summary: Update a topic
      security:
        - bearerAuth: []
      parameters:
        - name: topic_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicModel'
      responses:
        "200":
          description: Topic updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicResponse'
        "404":
          description: Topic not found
        "422":
          description: Validation error

    delete:
      tags: [Topics]
      summary: Delete a topic
      security:
        - bearerAuth: []
      parameters:
        - name: topic_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Topic deleted
        "404":
          description: Topic not found

# -------------------
# SUBSCRIPTIONS
# -------------------
  /subscriptions:
    get:
      tags: [Subscriptions]
      summary: List current user's subscriptions
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionResponse'
        "401":
          description: Unauthorized / invalid token

    post:
      tags: [Subscriptions]
      summary: Create a new subscription
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionModel'
      responses:
        "201":
          description: Subscription created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        "400":
          description: Invalid payload
        "422":
          description: Validation error
        "401":
          description: Unauthorized / invalid token

  /subscriptions/{sub_id}:
    get:
      tags: [Subscriptions]
      summary: Get subscription by ID
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Subscription data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "404":
          description: Subscription not found
        "401":
          description: Unauthorized / invalid token

    put:
      tags: [Subscriptions]
      summary: Update a subscription
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                topic_filter:
                  type: string
                active:
                  type: boolean
              description: Fields to update (at least one required)
      responses:
        "200":
          description: Subscription updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        "400":
          description: No valid fields to update
        "404":
          description: Subscription not found
        "422":
          description: Validation error
        "401":
          description: Unauthorized / invalid token

    delete:
      tags: [Subscriptions]
      summary: Delete a subscription
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Subscription deleted
        "404":
          description: Subscription not found
        "401":
          description: Unauthorized / invalid token

  # -------------------
  # COMPONENTS (schemas)
  # -------------------
  components:
    schemas:
      SubscriptionModel:
        type: object
        required:
          - topic_filter
        properties:
          topic_filter:
            type: string
            description: Unix-style topic filter (e.g., "uk/bristol/*/*")
          queue:
            type: string
            nullable: true
            description: Optional queue name
          active:
            type: boolean
            default: true
            description: Subscription is active or not
          user_id:
            type: string
            nullable: true
          created_at:
            type: string
            format: date-time
            nullable: true
          updated_at:
            type: string
            format: date-time
            nullable: true

      SubscriptionResponse:
        allOf:
          - $ref: '#/components/schemas/SubscriptionModel'
          - type: object
            properties:
              id:
                type: string

