services:
  traefik:
    image: traefik:v3.5.2
    command:
      - --providers.docker=true
      - --providers.docker.network=frontend-net
      - --entrypoints.web.address=:80
      - --providers.docker.exposedbydefault=false
      - --log.level=DEBUG
      - --api.insecure=false
      - --api.dashboard=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=web
      - traefik.http.routers.dashboard.rule=Host(`traefik.local`)
      - traefik.http.services.dashboard.loadbalancer.server.port=8080
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - frontend-net

  api:
    build: ./services/api
    env_file: .env
    depends_on:
      - mongo
      - rabbitmq
      - influxdb
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.local`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.services.api.loadbalancer.server.port=8000
    networks:
      - frontend-net
      - backend-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: ./services/frontend
      args:
        NEXT_PUBLIC_API_URL: ${API_URL}
    env_file: .env
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL}
    depends_on:
      - api
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`matric.local`)
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    networks:
      - frontend-net

  mongo:
    image: mongo:7
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITIAL_DB}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASS}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend-net

  mongo-express:
    image: mongo-express:1.0.2
    restart: unless-stopped
    depends_on:
      - mongo
    env_file: .env
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ADMIN_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ADMIN_PASS}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS}
    ports:
      - "8081:8081"
    networks:
      - backend-net

  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - backend-net

  influxdb:
    image: influxdb:2.7
    env_file: .env
    environment:
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUX_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUX_PASS}
    ports:
      - "8086:8086"
    networks:
      - backend-net

  emulator:
    build: 
      context: .
      dockerfile: ./services/emulator/Dockerfile
    env_file: .env
    depends_on:
      - api
    networks:
      - backend-net
    ports:
      - "6000:6000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s

  matcher:
    build: ./services/matcher
    env_file: .env
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - backend-net
    ports:
      - "7000:7000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 10s
      timeout: 2s
      retries: 3
      start_period: 5s

volumes:
  mongo_data:

networks:
  frontend-net:
    driver: bridge
    name: frontend-net
  backend-net:
    driver: bridge
