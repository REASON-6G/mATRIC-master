"""change agnet_id column to string

Revision ID: fbc41c0e5bee
Revises: 1d8bb701dbd7
Create Date: 2024-09-25 11:43:33.812129

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID


# revision identifiers, used by Alembic.
revision: str = 'fbc41c0e5bee'
down_revision: Union[str, None] = '1d8bb701dbd7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # # ### commands auto generated by Alembic - please adjust! ###
    # op.create_unique_constraint(None, 'commands', ['id'])
    # op.drop_constraint('commands_agent_id_fkey', 'commands', type_='foreignkey')
    # op.create_foreign_key(None, 'commands', 'agents', ['agent_id'], ['ap_id'])
    # # ### end Alembic commands ###
    # 1. Drop the foreign key constraint (if it exists)
    op.drop_constraint('commands_agent_id_fkey', 'commands', type_='foreignkey')

    # 2. Alter the agent_id column type from UUID to String (VARCHAR)
    op.alter_column(
        'commands',
        'agent_id',
        existing_type=UUID(as_uuid=True),  # Current type is UUID
        type_=sa.String(),  # New type is String (VARCHAR)
        postgresql_using="agent_id::text"  # Convert UUID to text
    )

    # (Optional) 3. If you need the foreign key again, re-apply it
    op.create_foreign_key(
        'fk_agent_id',
        'commands',
        'agents',
        ['agent_id'],  # Source column (now String)
        ['ap_id'],  # Target column
        ondelete='CASCADE'
    )



def downgrade() -> None:
    # # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint(None, 'commands', type_='foreignkey')
    # op.create_foreign_key('commands_agent_id_fkey', 'commands', 'agents', ['agent_id'], ['id'])
    # op.drop_constraint(None, 'commands', type_='unique')
    # # ### end Alembic commands ###
    # Revert the changes if needed

    # 1. Drop the foreign key constraint (if it was reapplied)
    # op.drop_constraint('fk_agent_id', 'commands', type_='foreignkey')

    # 2. Revert agent_id back to UUID
    op.alter_column(
        'commands',
        'agent_id',
        existing_type=sa.String(),  # Current type is String
        type_=UUID(as_uuid=True),  # Revert to UUID
        postgresql_using="agent_id::uuid"  # Convert String back to UUID
    )

    # (Optional) 3. Reapply the foreign key constraint, if it was dropped
    op.create_foreign_key(
        'fk_agent_id',
        'commands',
        'agents',
        ['agent_id'],
        ['ap_id'],
        ondelete='CASCADE'
    )